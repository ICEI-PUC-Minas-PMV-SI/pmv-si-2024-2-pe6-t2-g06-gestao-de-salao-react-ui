{"ast":null,"code":"// import axios from \"axios\";\n// import { handleError } from \"../Helpers/ErrorHandler\";\n// import { UserProfileToken } from \"../Models/User\";\n\n// const api = \"http://localhost:5001/gateway/\";\n\n// export const loginAPI = async (email: string, senha: string) => {\n//   try {\n//     const data = await axios.post<UserProfileToken>(api + \"Usuarios/authentication\", {\n//       email: email,\n//       senha: senha,\n//     });\n//     return data;\n//   } catch (error) {\n//     handleError(error);\n//   }\n\n// Adapted loginAPI using Fetch API\nexport const loginAPI = async (email, senha) => {\n  try {\n    const response = await fetch('https://localhost:5001/gateway/Usuarios/authentication', {\n      mode: 'no-cors',\n      method: 'POST',\n      // Specify the method\n      headers: {\n        'Content-Type': 'application/json' // Set the content type\n      },\n      body: JSON.stringify({\n        email,\n        senha\n      }) // Convert the object to a JSON string\n    });\n\n    // Check if the response is OK (status in the range 200-299)\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json(); // Parse the JSON from the response\n    console.log(data); // Log the response data\n    return data; // Return the data object\n  } catch (error) {\n    console.error('Error during login:', error); // Log the error for debugging\n    throw error; // Re-throw the error to be handled in useAuth.tsx\n  }\n};","map":{"version":3,"names":["loginAPI","email","senha","response","fetch","mode","method","headers","body","JSON","stringify","ok","Error","status","data","json","console","log","error"],"sources":["C:/ProjetoSalao/pmv-si-2024-2-pe6-t2-g06-gestao-de-salao-react-ui/src/Pages/Services/AuthService.tsx"],"sourcesContent":["// import axios from \"axios\";\r\n// import { handleError } from \"../Helpers/ErrorHandler\";\r\n// import { UserProfileToken } from \"../Models/User\";\r\n\r\n// const api = \"http://localhost:5001/gateway/\";\r\n\r\n// export const loginAPI = async (email: string, senha: string) => {\r\n//   try {\r\n//     const data = await axios.post<UserProfileToken>(api + \"Usuarios/authentication\", {\r\n//       email: email,\r\n//       senha: senha,\r\n//     });\r\n//     return data;\r\n//   } catch (error) {\r\n//     handleError(error);\r\n//   }\r\n\r\n\r\n\r\nimport axios from 'axios';\r\n\r\n// Adapted loginAPI using Fetch API\r\nexport const loginAPI = async (email: string, senha: string) => {\r\n  try {\r\n    const response = await fetch('https://localhost:5001/gateway/Usuarios/authentication', {\r\n      mode: 'no-cors',\r\n      method: 'POST', // Specify the method\r\n      headers: {\r\n        'Content-Type': 'application/json' // Set the content type\r\n      },\r\n      body: JSON.stringify({email,senha}) // Convert the object to a JSON string\r\n    });\r\n\r\n    // Check if the response is OK (status in the range 200-299)\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n\r\n    const data = await response.json(); // Parse the JSON from the response\r\n    console.log(data); // Log the response data\r\n    return data; // Return the data object\r\n  } catch (error) {\r\n    console.error('Error during login:', error); // Log the error for debugging\r\n    throw error; // Re-throw the error to be handled in useAuth.tsx\r\n  }\r\n};\r\n\r\n"],"mappings":"AAAA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAMA;AACA,OAAO,MAAMA,QAAQ,GAAG,MAAAA,CAAOC,KAAa,EAAEC,KAAa,KAAK;EAC9D,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,wDAAwD,EAAE;MACrFC,IAAI,EAAE,SAAS;MACfC,MAAM,EAAE,MAAM;MAAE;MAChBC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB,CAAC;MACrC,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAACT,KAAK;QAACC;MAAK,CAAC,CAAC,CAAC;IACtC,CAAC,CAAC;;IAEF;IACA,IAAI,CAACC,QAAQ,CAACQ,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBT,QAAQ,CAACU,MAAM,EAAE,CAAC;IAC3D;IAEA,MAAMC,IAAI,GAAG,MAAMX,QAAQ,CAACY,IAAI,CAAC,CAAC,CAAC,CAAC;IACpCC,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC,CAAC,CAAC;IACnB,OAAOA,IAAI,CAAC,CAAC;EACf,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdF,OAAO,CAACE,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC,CAAC,CAAC;IAC7C,MAAMA,KAAK,CAAC,CAAC;EACf;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}