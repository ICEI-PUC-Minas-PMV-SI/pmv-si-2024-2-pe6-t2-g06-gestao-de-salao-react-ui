{"ast":null,"code":"var _jsxFileName = \"C:\\\\ProjetoSalao\\\\pmv-si-2024-2-pe6-t2-g06-gestao-de-salao-react-ui\\\\src\\\\Pages\\\\Context\\\\UserProvider.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// Context/UserProvider.tsx\nimport React, { createContext, useContext, useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const UserProvider = ({\n  children\n}) => {\n  _s();\n  const [token, setToken] = useState(null);\n  const [user, setUser] = useState(null);\n  const loginUser = async (email, senha) => {\n    try {\n      const response = await axios.post('/api/login', {\n        email,\n        senha\n      });\n      const {\n        token,\n        userId\n      } = response.data; // Adjust according to your API response structure\n      setToken(token);\n      setUser({\n        userId\n      }); // Save user data as needed\n      return userId; // Return userId for navigation\n    } catch (error) {\n      console.error('Login failed:', error);\n      throw new Error('Login failed. Please check your credentials.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      token,\n      user,\n      loginUser\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n};\n\n// Hook for consuming context\n_s(UserProvider, \"m0Zk2BcdAa00bRaa/QDaQ/a2Y0c=\");\n_c = UserProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within a UserProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","axios","jsxDEV","_jsxDEV","AuthContext","undefined","UserProvider","children","_s","token","setToken","user","setUser","loginUser","email","senha","response","post","userId","data","error","console","Error","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","$RefreshReg$"],"sources":["C:/ProjetoSalao/pmv-si-2024-2-pe6-t2-g06-gestao-de-salao-react-ui/src/Pages/Context/UserProvider.tsx"],"sourcesContent":["// Context/UserProvider.tsx\r\nimport React, { createContext, useContext, useState } from 'react';\r\nimport axios from 'axios';\r\n\r\ninterface User {\r\n    userId: string;\r\n    // Add any other user-related properties\r\n}\r\n\r\ninterface AuthContextProps {\r\n    token: string | null;\r\n    user: User | null;\r\n    loginUser: (email: string, senha: string) => Promise<string>; // userId as a return type\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextProps | undefined>(undefined);\r\n\r\nexport const UserProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n    const [token, setToken] = useState<string | null>(null);\r\n    const [user, setUser] = useState<User | null>(null);\r\n\r\n    const loginUser = async (email: string, senha: string): Promise<string> => {\r\n        try {\r\n            const response = await axios.post('/api/login', { email, senha });\r\n            const { token, userId } = response.data; // Adjust according to your API response structure\r\n            setToken(token);\r\n            setUser({ userId }); // Save user data as needed\r\n            return userId; // Return userId for navigation\r\n        } catch (error) {\r\n            console.error('Login failed:', error);\r\n            throw new Error('Login failed. Please check your credentials.');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <AuthContext.Provider value={{ token, user, loginUser }}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n};\r\n\r\n// Hook for consuming context\r\nexport const useAuth = () => {\r\n    const context = useContext(AuthContext);\r\n    if (context === undefined) {\r\n        throw new Error('useAuth must be used within a UserProvider');\r\n    }\r\n    return context;\r\n};\r\n"],"mappings":";;;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AAClE,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAa1B,MAAMC,WAAW,gBAAGN,aAAa,CAA+BO,SAAS,CAAC;AAE1E,OAAO,MAAMC,YAAqD,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACnF,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAgB,IAAI,CAAC;EACvD,MAAM,CAACW,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,CAAc,IAAI,CAAC;EAEnD,MAAMa,SAAS,GAAG,MAAAA,CAAOC,KAAa,EAAEC,KAAa,KAAsB;IACvE,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMf,KAAK,CAACgB,IAAI,CAAC,YAAY,EAAE;QAAEH,KAAK;QAAEC;MAAM,CAAC,CAAC;MACjE,MAAM;QAAEN,KAAK;QAAES;MAAO,CAAC,GAAGF,QAAQ,CAACG,IAAI,CAAC,CAAC;MACzCT,QAAQ,CAACD,KAAK,CAAC;MACfG,OAAO,CAAC;QAAEM;MAAO,CAAC,CAAC,CAAC,CAAC;MACrB,OAAOA,MAAM,CAAC,CAAC;IACnB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;MACrC,MAAM,IAAIE,KAAK,CAAC,8CAA8C,CAAC;IACnE;EACJ,CAAC;EAED,oBACInB,OAAA,CAACC,WAAW,CAACmB,QAAQ;IAACC,KAAK,EAAE;MAAEf,KAAK;MAAEE,IAAI;MAAEE;IAAU,CAAE;IAAAN,QAAA,EACnDA;EAAQ;IAAAkB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CAAC;AAE/B,CAAC;;AAED;AAAApB,EAAA,CAxBaF,YAAqD;AAAAuB,EAAA,GAArDvB,YAAqD;AAyBlE,OAAO,MAAMwB,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EACzB,MAAMC,OAAO,GAAGjC,UAAU,CAACK,WAAW,CAAC;EACvC,IAAI4B,OAAO,KAAK3B,SAAS,EAAE;IACvB,MAAM,IAAIiB,KAAK,CAAC,4CAA4C,CAAC;EACjE;EACA,OAAOU,OAAO;AAClB,CAAC;AAACD,GAAA,CANWD,OAAO;AAAA,IAAAD,EAAA;AAAAI,YAAA,CAAAJ,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}