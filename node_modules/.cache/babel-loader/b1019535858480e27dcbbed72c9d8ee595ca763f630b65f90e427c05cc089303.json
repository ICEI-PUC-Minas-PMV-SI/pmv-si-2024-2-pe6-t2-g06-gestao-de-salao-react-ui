{"ast":null,"code":"// Adapted loginAPI usingy\nexport const loginAPI = async (email, senha) => {\n  try {\n    const response = await fetch('https://localhost:5001/gateway/Usuarios/authentication', {\n      method: 'POST',\n      // Specify the method\n      headers: {\n        'Content-Type': 'application/json',\n        // Set the content type\n        'Accept': 'application/json' // Ensure the server knows we're expecting JSON in response\n      },\n      body: JSON.stringify({\n        email: email,\n        senha: senha // Explicitly name the keys for the object\n      }) // Convert the object to a JSON string\n    });\n\n    // Check if the response is OK (status in the range 200-299)\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json(); // Parse the JSON from the response\n    console.log(data); // Log the response data\n    return data; // Return the data object\n  } catch (error) {\n    console.error('Error during login:', error); // Log the error for debugging\n    throw error; // Re-throw the error to be handled in useAuth.tsx\n  }\n};","map":{"version":3,"names":["loginAPI","email","senha","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","data","json","console","log","error"],"sources":["C:/ProjetoSalao/pmv-si-2024-2-pe6-t2-g06-gestao-de-salao-react-ui/src/Pages/Services/AuthService.tsx"],"sourcesContent":["// Adapted loginAPI usingy\r\nexport const loginAPI = async (email: string, senha: string) => {\r\n  try {\r\n    const response = await fetch('https://localhost:5001/gateway/Usuarios/authentication', {\r\n      method: 'POST', // Specify the method\r\n      headers: {\r\n        'Content-Type': 'application/json', // Set the content type\r\n        'Accept': 'application/json' // Ensure the server knows we're expecting JSON in response\r\n      },\r\n      body: JSON.stringify({\r\n        email: email,\r\n        senha: senha // Explicitly name the keys for the object\r\n      }) // Convert the object to a JSON string\r\n    });\r\n\r\n    // Check if the response is OK (status in the range 200-299)\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n\r\n    const data = await response.json(); // Parse the JSON from the response\r\n    console.log(data); // Log the response data\r\n    return data; // Return the data object\r\n  } catch (error) {\r\n    console.error('Error during login:', error); // Log the error for debugging\r\n    throw error; // Re-throw the error to be handled in useAuth.tsx\r\n  }\r\n};"],"mappings":"AAAA;AACA,OAAO,MAAMA,QAAQ,GAAG,MAAAA,CAAOC,KAAa,EAAEC,KAAa,KAAK;EAC9D,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,wDAAwD,EAAE;MACrFC,MAAM,EAAE,MAAM;MAAE;MAChBC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAAE;QACpC,QAAQ,EAAE,kBAAkB,CAAC;MAC/B,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBR,KAAK,EAAEA,KAAK;QACZC,KAAK,EAAEA,KAAK,CAAC;MACf,CAAC,CAAC,CAAC;IACL,CAAC,CAAC;;IAEF;IACA,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBR,QAAQ,CAACS,MAAM,EAAE,CAAC;IAC3D;IAEA,MAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC,CAAC,CAAC;IACpCC,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC,CAAC,CAAC;IACnB,OAAOA,IAAI,CAAC,CAAC;EACf,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdF,OAAO,CAACE,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC,CAAC,CAAC;IAC7C,MAAMA,KAAK,CAAC,CAAC;EACf;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}